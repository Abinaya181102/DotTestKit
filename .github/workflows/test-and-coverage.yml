name: Run Tests and Upload to SonarQube

on:
  push:
    branches: [ main, abi ]
  pull_request:
    branches: [ main, abi ]

jobs:
  sonar-analysis:
    runs-on: windows-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: http://localhost:9000

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests with coverage
      run: dotnet test DotTestKit.UnitTests/DotTestKit.UnitTests.csproj --collect:"XPlat Code Coverage"

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Add ReportGenerator to PATH
      run: echo "$HOME/.dotnet/tools" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

    - name: Generate coverage report
      run: |
        $coverageFile = Get-ChildItem -Recurse -Filter "coverage.cobertura.xml" | Select-Object -First 1
        reportgenerator -reports:"$coverageFile" -targetdir:"CoverageReport" -reporttypes:Html

    - name: Upload HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: CoverageReport

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarQube analysis
      run: dotnet sonarscanner begin /k:"DotTestKit" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.cs.opencover.reportsPaths="**/coverage.cobertura.xml"

    - name: Build the project
      run: dotnet build --no-incremental

    - name: End SonarQube analysis
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
